// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  teamMembers  TeamMember[]
}

model Team {
  id           Int      @id @default(autoincrement())
  name         String
  teamMembers  TeamMember[]
  settings     TeamSettings?
  githubToken  GithubToken?
  builds       Build[]
  releases     Release[]
  scheduledTests ScheduledTest[]
}

model TeamMember {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   Int
  role     String @default("member")
  @@id([userId, teamId])
}

model TeamSettings {
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    Int     @id
  settings  Json
}

model GithubToken {
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    Int     @id
  accessToken String
  createdAt  DateTime @default(now())
}

model Release {
  id          Int      @id @default(autoincrement())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      Int
  tagName     String   // e.g., "v1.2.3"
  name        String?  // e.g., "Release 1.2.3"
  description String?
  commitHash  String   // The commit hash of the release tag
  isPrerelease Boolean @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  builds      Build[]
  
  @@unique([teamId, tagName])
}

model Build {
  id                 Int      @id @default(autoincrement())
  team               Team     @relation(fields: [teamId], references: [id])
  teamId             Int
  release            Release? @relation(fields: [releaseId], references: [id])
  releaseId          Int?
  version            String
  branch             String
  commitHash         String
  commitMessage      String?
  author             String?
  status             String
  totalTests         Int?
  passedTests        Int?
  failedTests        Int?
  flakyTests         Int?
  coveragePercentage Float?
  buildDuration      Float?
  repoFullName       String
  workflowRunId      BigInt   @unique
  environment        String?
  createdAt          DateTime @default(now())
  testRuns           TestRun[]
}

model TestRun {
  id                 Int      @id @default(autoincrement())
  build              Build    @relation(fields: [buildId], references: [id])
  buildId            Int
  testSuite          String
  testType           String
  framework          String?  // e.g., "Jest", "Cypress", "PyTest"
  status             String
  duration           Float?
  coveragePercentage Float?
  errorMessage       String?
  stackTrace         String?
  screenshotUrl      String?
  aiAnalysis         Json?
  executionTrigger   String?
  environment        String?
  branch             String?
  commitHash         String?
  createdAt          DateTime @default(now())
}

model ScheduledTest {
  id                    Int      @id @default(autoincrement())
  team                  Team     @relation(fields: [teamId], references: [id])
  teamId                Int
  name                  String
  description           String?
  test_type             String   // "on_demand" or "scheduled"
  cron_expression       String?  // Standard cron expression for scheduled tests
  github_repo_full_name String
  workflow_file_name    String
  is_active             Boolean  @default(true)
  last_run_status       String   @default("never_run") // "succeeded", "failed", "pending", "running", "never_run"
  last_run_time         DateTime?
  next_run_time         DateTime?
  last_workflow_run_id  BigInt?  // GitHub workflow run ID for tracking status
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
