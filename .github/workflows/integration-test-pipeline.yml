name: Integration Test Pipeline (Vitest + Supertest + TAP)

on:
  workflow_dispatch:
    inputs:
      run_vitest:
        description: 'Run Vitest integration tests'
        required: false
        default: true
        type: boolean
      run_supertest:
        description: 'Run Supertest integration tests'
        required: false
        default: true
        type: boolean
      run_tap:
        description: 'Run TAP integration tests'
        required: false
        default: true
        type: boolean
      run_coverage:
        description: 'Generate coverage reports'
        required: false
        default: true
        type: boolean
      backend_url:
        description: 'Backend URL for integration tests'
        required: false
        default: 'http://localhost:4000'
        type: string

jobs:
  setup-backend:
    name: Setup Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
          echo "Backend started at http://localhost:4000"

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:4000/health; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done

  integration-tests-vitest:
    name: Integration Tests (Vitest)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_vitest == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Vitest integration tests
        run: npm run test:integration
        env:
          TEST_API_URL: ${{ github.event.inputs.backend_url }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: vitest-integration-results
          path: ./coverage/vitest-results.json

  integration-tests-supertest:
    name: Integration Tests (Supertest)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_supertest == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Supertest integration tests
        run: npm run test:integration:supertest
        env:
          TEST_API_URL: ${{ github.event.inputs.backend_url }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: supertest-integration-results
          path: ./coverage/supertest-results.json

  integration-tests-tap:
    name: Integration Tests (TAP)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_tap == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TAP integration tests
        run: npm run test:integration:tap
        env:
          TEST_API_URL: ${{ github.event.inputs.backend_url }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: tap-integration-results
          path: ./coverage/tap-results.json

  test-results-parser:
    name: Parse and Combine Integration Test Results
    runs-on: ubuntu-latest
    needs: [integration-tests-vitest, integration-tests-supertest, integration-tests-tap]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          path: ./coverage/

      - name: Parse test results
        run: |
          node -e "
          const { TestResultsParser } = require('./src/utils/testResultsParser.js');
          const parser = new TestResultsParser();
          
          // Parse results from each framework
          const vitestResults = parser.parseResults('vitest', 'integration', './coverage/vitest-results.json');
          const supertestResults = parser.parseResults('supertest', 'integration', './coverage/supertest-results.json');
          const tapResults = parser.parseResults('tap', 'integration', './coverage/tap-results.json');
          
          // Generate unified report
          const unifiedReport = parser.generateUnifiedReport([vitestResults, supertestResults, tapResults]);
          
          // Save unified report
          require('fs').writeFileSync('./reports/unified-integration-test-report.json', JSON.stringify(unifiedReport, null, 2));
          console.log('Unified integration test report generated');
          "

      - name: Upload unified test report
        uses: actions/upload-artifact@v3
        with:
          name: unified-integration-test-report
          path: ./reports/unified-integration-test-report.json

  notify-results:
    name: Notify Integration Test Results
    runs-on: ubuntu-latest
    needs: [integration-tests-vitest, integration-tests-supertest, integration-tests-tap, test-results-parser]
    if: always()
    steps:
      - name: Download unified test report
        uses: actions/download-artifact@v3
        with:
          name: unified-integration-test-report

      - name: Parse results for notification
        id: results
        run: |
          if [ -f "./unified-integration-test-report.json" ]; then
            TOTAL_TESTS=$(jq '.summary.total' unified-integration-test-report.json)
            PASSED_TESTS=$(jq '.summary.passed' unified-integration-test-report.json)
            FAILED_TESTS=$(jq '.summary.failed' unified-integration-test-report.json)
            SUCCESS_RATE=$(echo "scale=1; $PASSED_TESTS * 100 / $TOTAL_TESTS" | bc)
            
            echo "total=$TOTAL_TESTS" >> $GITHUB_OUTPUT
            echo "passed=$PASSED_TESTS" >> $GITHUB_OUTPUT
            echo "failed=$FAILED_TESTS" >> $GITHUB_OUTPUT
            echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          else
            echo "total=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "success_rate=0" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: ${{ steps.results.outputs.failed > 0 }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            Integration Test Pipeline Failed! 
            Total: ${{ steps.results.outputs.total }}
            Passed: ${{ steps.results.outputs.passed }}
            Failed: ${{ steps.results.outputs.failed }}
            Success Rate: ${{ steps.results.outputs.success_rate }}%
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack Success
        if: ${{ steps.results.outputs.failed == 0 }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            Integration Test Pipeline Passed! 
            Total: ${{ steps.results.outputs.total }}
            Passed: ${{ steps.results.outputs.passed }}
            Success Rate: ${{ steps.results.outputs.success_rate }}%
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
