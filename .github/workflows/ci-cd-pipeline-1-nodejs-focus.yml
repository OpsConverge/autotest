name: CI/CD Pipeline 1 - All Test Types

on:
  workflow_dispatch:
    inputs:
      run_unit_tests:
        description: 'Run Unit Tests (Jest)'
        required: false
        default: true
        type: boolean
      run_integration_tests:
        description: 'Run Integration Tests (Supertest)'
        required: false
        default: true
        type: boolean
      run_api_tests:
        description: 'Run API Tests (Postman/Newman)'
        required: false
        default: true
        type: boolean
      run_e2e_tests:
        description: 'Run E2E Tests (Playwright)'
        required: false
        default: true
        type: boolean
      test_flakiness:
        description: 'Enable flakiness testing (random pass/fail)'
        required: false
        default: true
        type: boolean
      backend_url:
        description: 'Backend URL for tests'
        required: false
        default: 'http://localhost:4000'
        type: string

jobs:
  setup-backend:
    name: Setup Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
          echo "Backend started at http://localhost:4000"

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:4000/health; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done

  unit-tests-jest:
    name: Unit Tests (Jest)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_unit_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest unit tests
        run: |
          if [ "${{ github.event.inputs.test_flakiness }}" = "true" ]; then
            echo "Running Jest tests with flakiness simulation..."
            npm run test:unit:jest:mock
          else
            echo "Running Jest tests normally..."
            npm run test:unit:jest
          fi
        env:
          ENABLE_FLAKINESS: ${{ github.event.inputs.test_flakiness }}

      - name: Upload Jest test results
        uses: actions/upload-artifact@v3
        with:
          name: jest-unit-results
          path: |
            ./coverage/jest-results.json
            ./coverage/lcov.info
            ./coverage/jest-coverage.json

  integration-tests-supertest:
    name: Integration Tests (Supertest)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_integration_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Supertest integration tests
        run: |
          if [ "${{ github.event.inputs.test_flakiness }}" = "true" ]; then
            echo "Running Supertest tests with flakiness simulation..."
            npm run test:integration:supertest:mock
          else
            echo "Running Supertest tests normally..."
            npm run test:integration:supertest
          fi
        env:
          TEST_API_URL: ${{ github.event.inputs.backend_url }}
          ENABLE_FLAKINESS: ${{ github.event.inputs.test_flakiness }}

      - name: Upload Supertest test results
        uses: actions/upload-artifact@v3
        with:
          name: supertest-integration-results
          path: |
            ./coverage/supertest-results.json
            ./coverage/supertest-coverage.json

  api-tests-postman:
    name: API Tests (Postman/Newman)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_api_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman/Newman API tests
        run: |
          if [ "${{ github.event.inputs.test_flakiness }}" = "true" ]; then
            echo "Running Postman tests with flakiness simulation..."
            npm run test:api:postman:mock
          else
            echo "Running Postman tests normally..."
            npm run test:api:postman
          fi
        env:
          TEST_API_URL: ${{ github.event.inputs.backend_url }}
          ENABLE_FLAKINESS: ${{ github.event.inputs.test_flakiness }}

      - name: Upload Postman test results
        uses: actions/upload-artifact@v3
        with:
          name: postman-api-results
          path: |
            ./newman-results.json
            ./coverage/postman-results.json

  e2e-tests-playwright:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ github.event.inputs.run_e2e_tests == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright E2E tests
        run: |
          if [ "${{ github.event.inputs.test_flakiness }}" = "true" ]; then
            echo "Running Playwright tests with flakiness simulation..."
            npm run test:e2e:playwright:mock
          else
            echo "Running Playwright tests normally..."
            npm run test:e2e:playwright
          fi
        env:
          TEST_API_URL: ${{ github.event.inputs.backend_url }}
          ENABLE_FLAKINESS: ${{ github.event.inputs.test_flakiness }}

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v3
        with:
          name: playwright-e2e-results
          path: |
            ./playwright-report/
            ./test-results/
            ./coverage/playwright-results.json

  analyze-flakiness:
    name: Analyze Test Flakiness
    runs-on: ubuntu-latest
    needs: [unit-tests-jest, integration-tests-supertest, api-tests-postman, e2e-tests-playwright]
    if: ${{ github.event.inputs.test_flakiness == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: ./test-results

      - name: Analyze flakiness patterns
        run: |
          echo "Analyzing test flakiness patterns..."
          node scripts/analyze-flakiness.js pipeline1
        env:
          TEST_RESULTS_PATH: ./test-results

      - name: Upload flakiness report
        uses: actions/upload-artifact@v3
        with:
          name: flakiness-analysis-pipeline1
          path: ./flakiness-report.json
