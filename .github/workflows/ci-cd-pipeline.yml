name: CI/CD Pipeline - Test Management App

on:
  workflow_dispatch:
  # push:
  #   branches: [ main, develop, master ]
  # pull_request:
  #   branches: [ main, develop, master ]

env:
  NODE_VERSION: '18'
  TEST_ENVIRONMENT_URL: ${{ secrets.TEST_ENVIRONMENT_URL }}
  TEST_ENVIRONMENT_IP: ${{ secrets.TEST_ENVIRONMENT_IP }}
  TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
  TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Generate coverage report
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unit
          name: unit-coverage

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

  # Job 4: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: npm run test:api

  # Job 5: Deploy to Test Environment
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Deploy to EC2 Test Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TEST_ENVIRONMENT_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /opt/autotest
            git pull origin main
            docker-compose -f docker-compose.test.yml down
            docker-compose -f docker-compose.test.yml build --no-cache
            docker-compose -f docker-compose.test.yml up -d
            docker-compose -f docker-compose.test.yml exec backend node scripts/migrate.js
            echo "Deployment completed successfully"

      - name: Wait for deployment
        run: |
          sleep 30
          echo "Waiting for services to be ready..."

  # Job 6: E2E Tests against Test Environment
  e2e-tests:
    name: E2E Tests (Test Environment)
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment variables
        run: |
          echo "TEST_TARGET_URL=${{ env.TEST_ENVIRONMENT_URL }}" >> $GITHUB_ENV
          echo "TEST_API_URL=${{ env.TEST_ENVIRONMENT_URL }}/api" >> $GITHUB_ENV

      - name: Run E2E tests against test environment
        run: |
          npm run test:e2e
        env:
          TEST_TARGET_URL: ${{ env.TEST_ENVIRONMENT_URL }}
          TEST_API_URL: ${{ env.TEST_ENVIRONMENT_URL }}/api
          TEST_USER_EMAIL: ${{ env.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ env.TEST_USER_PASSWORD }}

      - name: Run API integration tests against test environment
        run: |
          cd backend && node scripts/run-tests.js test
        env:
          TEST_TARGET_URL: ${{ env.TEST_ENVIRONMENT_URL }}
          TEST_API_URL: ${{ env.TEST_ENVIRONMENT_URL }}/api
          TEST_USER_EMAIL: ${{ env.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ env.TEST_USER_PASSWORD }}

  # Job 7: Test Results Summary
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, e2e-tests]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### API Tests: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.api-tests.result }}" == "success" ] && [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
